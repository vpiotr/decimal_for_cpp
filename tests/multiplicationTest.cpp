#include "..\include\decimal.h"
#include <iostream>
#include <vector>
#include <chrono>

#define duration(a) std::chrono::duration_cast<std::chrono::nanoseconds>(a).count()
#define timeNow() std::chrono::high_resolution_clock::now()



int main()
{


	std::vector<double> myDoubles{ 1.0001,1.0002,1.0003,1.0004,1.0005,1.0006,1.0007,1.0008,1.0009,1.001,1.0011
		,1.0012,1.0013,1.0014,1.0015,1.0016,1.0017,1.0018,1.0019,1.002,1.0021,1.0022,1.0023,1.0024,1.0025
		,1.0026,1.0027,1.0028,1.0029,1.003,1.0031,1.0032,1.0033,1.0034,1.0035,1.0036,1.0037,1.0038,1.0039,1.004
		,1.0041,1.0042,1.0043,1.0044,1.0045,1.0046,1.0047,1.0048,1.0049,1.005,1.0051,1.0052,1.0053,1.0054,1.0055
		,1.0056,1.0057,1.0058,1.0059,1.006,1.0061,1.0062,1.0063,1.0064,1.0065,1.0066,1.0067,1.0068,1.0069,1.007
		,1.0071,1.0072,1.0073,1.0074,1.0075,1.0076,1.0077,1.0078,1.0079,1.008,1.0081,1.0082,1.0083,1.0084,1.0085
		,1.0086,1.0087,1.0088,1.0089,1.009,1.0091,1.0092,1.0093,1.0094,1.0095,1.0096,1.0097,1.0098,1.0099,1.01
		,1.0101,1.0102,1.0103,1.0104,1.0105,1.0106,1.0107,1.0108,1.0109,1.011,1.0111,1.0112,1.0113,1.0114,1.0115
		,1.0116,1.0117,1.0118,1.0119,1.012,1.0121,1.0122,1.0123,1.0124,1.0125,1.0126,1.0127,1.0128,1.0129,1.013
		,1.0131,1.0132,1.0133,1.0134,1.0135,1.0136,1.0137,1.0138,1.0139,1.014,1.0141,1.0142,1.0143,1.0144,1.0145
		,1.0146,1.0147,1.0148,1.0149,1.015,1.0151,1.0152,1.0153,1.0154,1.0155,1.0156,1.0157,1.0158,1.0159,1.016
		,1.0161,1.0162,1.0163,1.0164,1.0165,1.0166,1.0167,1.0168,1.0169,1.017,1.0171,1.0172,1.0173,1.0174,1.0175
		,1.0176,1.0177,1.0178,1.0179,1.018,1.0181,1.0182,1.0183,1.0184,1.0185,1.0186,1.0187,1.0188,1.0189,1.019
		,1.0191,1.0192,1.0193,1.0194,1.0195,1.0196,1.0197,1.0198,1.0199,1.02,1.0201,1.0202,1.0203,1.0204,1.0205
		,1.0206,1.0207,1.0208,1.0209,1.021,1.0211,1.0212,1.0213,1.0214,1.0215,1.0216,1.0217,1.0218,1.0219,1.022
		,1.0221,1.0222,1.0223,1.0224,1.0225,1.0226,1.0227,1.0228,1.0229,1.023,1.0231,1.0232,1.0233,1.0234,1.0235
		,1.0236,1.0237,1.0238,1.0239,1.024,1.0241,1.0242,1.0243,1.0244,1.0245,1.0246,1.0247,1.0248,1.0249,1.025
		,1.0251,1.0252,1.0253,1.0254,1.0255,1.0256,1.0257,1.0258,1.0259,1.026,1.0261,1.0262,1.0263,1.0264,1.0265
		,1.0266,1.0267,1.0268,1.0269,1.027,1.0271,1.0272,1.0273,1.0274,1.0275,1.0276,1.0277,1.0278,1.0279,1.028
		,1.0281,1.0282,1.0283,1.0284,1.0285,1.0286,1.0287,1.0288,1.0289,1.029,1.0291,1.0292,1.0293,1.0294,1.0295
		,1.0296,1.0297,1.0298,1.0299,1.03,1.0301,1.0302,1.0303,1.0304,1.0305,1.0306,1.0307,1.0308,1.0309,1.031
		,1.0311,1.0312,1.0313,1.0314,1.0315,1.0316,1.0317,1.0318,1.0319,1.032,1.0321,1.0322,1.0323,1.0324,1.0325
		,1.0326,1.0327,1.0328,1.0329,1.033,1.0331,1.0332,1.0333,1.0334,1.0335,1.0336,1.0337,1.0338,1.0339,1.034
		,1.0341,1.0342,1.0343,1.0344,1.0345,1.0346,1.0347,1.0348,1.0349,1.035,1.0351,1.0352,1.0353,1.0354,1.0355
		,1.0356,1.0357,1.0358,1.0359,1.036,1.0361,1.0362,1.0363,1.0364,1.0365,1.0366,1.0367,1.0368,1.0369,1.037
		,1.0371,1.0372,1.0373,1.0374,1.0375,1.0376,1.0377,1.0378,1.0379,1.038,1.0381,1.0382,1.0383,1.0384,1.0385
		,1.0386,1.0387,1.0388,1.0389,1.039,1.0391,1.0392,1.0393,1.0394,1.0395,1.0396,1.0397,1.0398,1.0399,1.04
		,1.0401,1.0402,1.0403,1.0404,1.0405,1.0406,1.0407,1.0408,1.0409,1.041,1.0411,1.0412,1.0413,1.0414,1.0415
		,1.0416,1.0417,1.0418,1.0419,1.042,1.0421,1.0422,1.0423,1.0424,1.0425,1.0426,1.0427,1.0428,1.0429,1.043
		,1.0431,1.0432,1.0433,1.0434,1.0435,1.0436,1.0437,1.0438,1.0439,1.044,1.0441,1.0442,1.0443,1.0444,1.0445
		,1.0446,1.0447,1.0448,1.0449,1.045,1.0451,1.0452,1.0453,1.0454,1.0455,1.0456,1.0457,1.0458,1.0459,1.046
		,1.0461,1.0462,1.0463,1.0464,1.0465,1.0466,1.0467,1.0468,1.0469,1.047,1.0471,1.0472,1.0473,1.0474,1.0475
		,1.0476,1.0477,1.0478,1.0479,1.048,1.0481,1.0482,1.0483,1.0484,1.0485,1.0486,1.0487,1.0488,1.0489,1.049
		,1.0491,1.0492,1.0493,1.0494,1.0495,1.0496,1.0497,1.0498,1.0499,1.05,1.0501,1.0502,1.0503,1.0504,1.0505
		,1.0506,1.0507,1.0508,1.0509,1.051,1.0511,1.0512,1.0513,1.0514,1.0515,1.0516,1.0517,1.0518,1.0519,1.052
		,1.0521,1.0522,1.0523,1.0524,1.0525,1.0526,1.0527,1.0528,1.0529,1.053,1.0531,1.0532,1.0533,1.0534,1.0535
		,1.0536,1.0537,1.0538,1.0539,1.054,1.0541,1.0542,1.0543,1.0544,1.0545,1.0546,1.0547,1.0548,1.0549,1.055
		,1.0551,1.0552,1.0553,1.0554,1.0555,1.0556,1.0557,1.0558,1.0559,1.056,1.0561,1.0562,1.0563,1.0564,1.0565
		,1.0566,1.0567,1.0568,1.0569,1.057,1.0571,1.0572,1.0573,1.0574,1.0575,1.0576,1.0577,1.0578,1.0579,1.058
		,1.0581,1.0582,1.0583,1.0584,1.0585,1.0586,1.0587,1.0588,1.0589,1.059,1.0591,1.0592,1.0593,1.0594,1.0595
		,1.0596,1.0597,1.0598,1.0599,1.06,1.0601,1.0602,1.0603,1.0604,1.0605,1.0606,1.0607,1.0608,1.0609,1.061};

	std::vector<dec::decimal<4>> myDecimals;
	myDecimals.reserve(myDoubles.size() * 4);

	for (auto val : myDoubles){
		myDecimals.push_back(dec::decimal_cast<4>(val));
	}
	for (auto val : myDoubles) {
		myDecimals.push_back(dec::decimal_cast<4>(val) * 4);
	}
	for (auto val : myDoubles) {
		myDecimals.push_back(dec::decimal_cast<4>(val) * 123);
	}
	for (auto val : myDoubles) {
		myDecimals.push_back(dec::decimal_cast<4>(val) * dec::decimal_cast<4>(574.567));
	}
	for (auto val : myDoubles) {
		myDecimals.push_back(dec::decimal_cast<4>(val) * dec::decimal_cast<4>(934551.235));
	}
	for (auto val : myDoubles) {
		myDecimals.push_back(dec::decimal_cast<4>(val) * dec::decimal_cast<4>(-3457574.567));
	}

	//check how long it takes to multiply the numbers in the vector
	auto t1 = timeNow();

	for (auto val : myDecimals) {
		val *= dec::decimal_cast<4>(33556.3452);
	}

	std::cout << "Running " << myDecimals.size() << " multiplications takes " << duration(timeNow() - t1) << " nanoseconds\n";

	// test accuracy of big number calculation
	dec::decimal<4> bignumber = dec::decimal_cast<4>(310000.6789);
	auto anotherbignumber = dec::decimal_cast<4>(310000.9876);
	std::cout << "Big number:          " << bignumber << " * " << anotherbignumber << " = " << bignumber * anotherbignumber << std::endl;
	// should be 96100516616.6705

	// test accuracy of multiplying with int
	auto num1 = dec::decimal_cast<4>(534632.4542);
	std::cout << "Multiply with int:   " << num1 << " *  34326      = " << num1 * 34326 << std::endl;

	// test accuracy of multiplying with float
	num1 = dec::decimal_cast<4>(534632.4542);
	std::cout << "Multiply with float: " << num1 << " *  34326.3521 = " << num1 * dec::decimal_cast<4>(34326.3521) << std::endl;
}